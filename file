//cat
#include "ucode.c"

#define BLKSIZE 1024

//my 360 stuff used to adapt 460 equivalent
/*int my_read(int fd, char * buf, int nbytes){
  printf("In Read\n");
  MINODE *mip, *mip2;
  mip = running->cwd;
  int count = 0, blk;
  if(nbytes > running->fd[fd]->mptr->INODE.i_size){
    nbytes = running->fd[fd]->mptr->INODE.i_size;//if nbytes is more than size set it to size
  }
  int available = running->fd[fd]->mptr->INODE.i_size - running->fd[fd]->offset;
  char  *cp = buf, readbuf[BLKSIZE];
  mip2 = running->fd[fd]->mptr;

  while(nbytes && available){
    //maps logic block to physical block
    int lbk = running->fd[fd]->offset / BLKSIZE;
    int startbyte = running->fd[fd]->offset % BLKSIZE;

    if(lbk < 12){
      printf("Direct blocks\n");
      blk = mip2->INODE.i_block[lbk];
    }
    else if(lbk >= 12 && lbk < 256 + 12){
      printf("indirect blocks\n");
      int indirect[256];
      get_block(mip2->dev,mip2->INODE.i_block[12],indirect);
      blk = indirect[lbk-12];
    }
    else{
      printf("double indirect blocks\n");
      int dbl_indirect[256];
      get_block(mip2->dev,mip2->INODE.i_block[13],dbl_indirect);
      for(int j = 1; j<257; j++){
        if(lbk >= 256*j+12 && lbk < 256*(j+1) + 12)
        {
          int block_storage[256];
          get_block(mip2->dev,dbl_indirect[j-1],block_storage);
          blk = block_storage[lbk-(256*j+12)];
          break;
        }
      }
    }
    if(blk == 0){
      return count;
    }
    //end mapping

    get_block(mip->dev, blk, readbuf);

    char *store = readbuf + startbyte;
    int remain = BLKSIZE - startbyte;
    while(remain > 0){
      if(nbytes-BLKSIZE > 0){
        printf("BLKSIZE to read\n");
        strncpy(buf, store, BLKSIZE);
        count += BLKSIZE;
        nbytes -= BLKSIZE;
        available -= BLKSIZE;
        remain -= BLKSIZE;
        running->fd[fd]->offset += BLKSIZE;

        if(nbytes <= 0 || available <= 0){
          break;
        }
      }
      else{
        //printf("less than BLKSIZE to read\n");
        strncpy(buf, store, nbytes);
        count += nbytes;
        available -= nbytes;
        remain -= nbytes;
        running->fd[fd]->offset += nbytes;
        nbytes -= nbytes;
        if(nbytes <= 0 || available <= 0){
          break;
        }
      }
    }
  }
  return count;
}

int cat_file(char * file){
  char buf[BLKSIZE];
  int n, i = 0;

  printf("in cat\n")
  int fd = open(file, 0);
  if(fd > -1){
    while( n = my_read(fd, buf, BLKSIZE)){
      printf("read block\n");
      for(i=0;i<n;i++){
        if(buf[i] == '\\'){
          if(buf[i+1] == 'n'){//if new line print new line
            putchar('\n');
            i++;
          }
        }else{
          putchar(buf[i]);
        }
      }
    }
    printf("\n");//print new line
    close_file(fd);
  }
  else{
    printf("ERROR: couldn't open file to read\n");
  }
}*/

int main(int argc, char *argv[]){
  //360 code attempt of course it doesn't work
  /*if(argc > 1){
    cat_file(argv[1]);
  }
  else{
    int n = 0;
    char tty[32];
    char *buf;
    char c;
    buf = &c;
    gettty(tty);
    int in = open(tty, O_RDONLY);
    int out = open(tty, O_WRONLY);

    while(1){
      n = read(in, buf, 1);
      if(n>1){
        write(out, buf, 1);
      }
    }
  }*/

  char tty[64];
  char buf[12];
  char line[128];

  int n, in, out, i;

  //gettty(tty);
  int out1 = open("/dev/tty0", O_WRONLY);

  if(argc < 2){
    in = 0;
    out = 1;
  }
  else{
    close(0);
    in = open(argv[1], O_RDONLY);
    out = 1;
  }

  i = 0;

  while(1){
    n = read(in, buf, 1);
    if(n<1){
      break;
    }
    line[i] = buf[0];
    if(!in){
      write(out1, buf[0], 1);
    }
    if(line[i] == '\n'){
      line[++i] = '\r';
      write(out, line, i);
      write(out1, "\r", 1);
      memset(line, 0, 128);
      i = 0;
    }
    else if (line[i] == '\r' && !in) {
      line[i++] = '\n';
      line[i++] = '\r';
      write(out1, "\r", 2);
      write(out,line,  i);
      memset(line, 0, 128);
      i = 0;
    }
    else{
      i++;
    }
  }
  close(in); close(out); close(out1);
  exit(0);
}
//cp
#include "ucode.c"

int main(int argc, char *argv[]){
  char buf;

  int in, out;
  if(argc == 3 && strcmp(argv[1], argv[2]) != 0){//makes sure there are source and destination and that source isnt destination
    in = open(argv[1], O_RDONLY);
    out = open(argv[2], O_WRONLY);
  }
  else{
    exit(-1);
  }
  while(read(in, &buf, 1)){
    write(out, &buf, 1);
  }
  exit(0);
}
//grep
#include "ucode.c"

#define BUFFSIZE 1024

char tty[32];
char buf[BUFFSIZE];

int main(int argc, char *argv[]){
  char * pattern;
  char line[128];
  int in, out;
  int i, j;
  int n;
  int flag = 0;

  //gettty(tty);
  int out1 = open("/dev/tty0", O_WRONLY);

  if(argc < 2){
    printf("not enough arguments\n");
    exit(-1);
  }

  if(argc < 3){//stdin
    pattern = argv[1];
    out = 1;
    in = 0;
  }
  else{//file
    pattern = argv[1];
    out = 1;
    in = open(argv[2], O_RDONLY);
    if(in < 0){
      printf("open failed\n");
    }
  }

  if(pattern != 0){
    exit(-1);
  }

  int length = strlen(pattern);

  i = 0;
  memset(line, 0, 128);//sets line to all 0
  while(1){
    n = read(in, buf, 1);
    if(n<1){
      break;
    }
    line[i] = buf[0];
    if(buf[0] == '\n' || buf[0] == '\r'){
      line[++i] == '\r';
      if(flag){
        write(out, line, i);
        write(out1, "\n\r", 1);
      }
      flag = 0;
      i = 0;
      memset(line, 0, 1);
    }
    else{
      /*while(line[i] == pattern[i] && i < length)
      {
        i++;
      }*/
      if(line[i] == pattern[j]){
        j++;
        if(j == length && !flag){
          flag = 1;
        }
      }
      else{
        j = 0;
      }
      /*if(i == length){
        flag = 1;
      }*/
      i++;
    }
  }
  close(in); close(out);
  exit(0);
}
//init
#include "ucode.c"
#define BUFFSIZE 1024

int in1, in2, in3, out1, out2, out3, err1, err2, err3;

int s0, s1, cons;
char buf[BUFFSIZE];


int main(int argc, char * argv[]){
  in1 = open("/dev/tty0", 0);
  out1 = open("/dev/tty0", 1);
  err1 = open("/dev/tty0", 2);
  in2 = open("/dev/ttyS0", 0);
  out2 = open("/dev/ttyS0", 1);
  err2 = open("/dev/ttyS0", 2);
  in3 = open("/dev/ttyS1", 0);
  out3 = open("/dev/ttyS1", 1);
  err3 = open("/dev/ttyS1", 2);

  int status;

  cons = fork();

  while(1){
    if(cons){
      s0 = fork();
      if(s0){
        s1 = fork();
        if(s1){
          int pid, status;
          while(1){
            printf("Init: waiting for zombie\n\r");
            pid = wait(&status);

            if(pid==cons){
              cons = fork();
              if(cons){
                continue;
              }
              else{
                char * line = "Init- Login on console:\n\r";
                write(out1, line, strlen(line));
                exec("login /dev/tty0");
              }
            }
            else if(pid == s0){
              s0 = fork();
              if(s0){
                continue;
              }
              else{
                char * line = "Init- Login on s0:\n\r";
                write(out2, line, strlen(line));
                exec("login /dev/ttyS0");
              }
            }
            else if(pid == s1){
              s1 = fork();
              if(s1){
                continue;
              }
              else{
                char * line = "Init- Login on s1:\n\r";
                write(out3, line, strlen(line));
                exec("login /dev/ttyS1");
              }
            }
          }
        }
        else{
          char * line = "Init- Login on s1:\n\r";
          write(out3, line, strlen(line));
          exec("login /dev/ttyS1");
        }
      }
      else{
        char * line = "Init- Login on s0:\n\r";
        write(out2, line, strlen(line));
        exec("login /dev/ttyS0");
      }
    }
    else{
      char * line = "Init- Login on console:\n\r";
      write(out1, line, strlen(line));
      exec("login /dev/tty0");
    }
  }
  return 0;
}
//l2u
#include "ucode.c"

#define BUFFSIZE 1024

char *lower = "abcdefghijklmnopqrstuvwxyz";
char *upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

char buf[BUFFSIZE];
char tty[32];


char twoupper(char c){
  int k = 0;
  while(lower[k]){
    if(lower[k] == c){
      return upper[k];
    }
    k++;
  }
  return -1;//not alpha
}

int main(int argc, char *argv[]){
  int n;
  int in, out;
  char line[128];

  //gettty(tty);
  int out1 = open("/dev/tty0", O_WRONLY);

  if(argc < 3){
    in = 0;
    out = 1;
  }
  else{
    in = open(argv[1], O_RDONLY);
    out = open(argv[2], O_WRONLY);
  }

  int i = 0;;

  while(1){
    n = read(in, buf, 1);
    if(n < 1){
      break;
    }
    line[i] = buf[0];
    char c = twoupper(buf[0]);
    //printf("after upper\n\r");
    if(c != -1){
      line[i] = c;
      buf[0] = c;
    }

    if(!in){
      write(out1, buf, 1);
    }
    if(line[i] == '\n'){
      line[++i] = '\r';
      write(out, line, i);
      write(out1, "\n\r", 2);
      memset(line, 0, 128);//reset lines
      i = 0;
    }
    else if(line[i] == '\r' && !in){
      line[i++] = '\n';
      line[i++] = '\r';
      write(out1, "\r\n", 2);
      write(out, line, i);
      i = 0;
    }
    else{
      i++;
    }
  }
  close(in);
  close(out);
  close(out1);
  exit(0);
}
//login
#include "ucode.c"

#define BUFFSIZE 1024

char buf[BUFFSIZE], *bp; //buffer and bufferpointer

//returns flag for no more tokens to parse. 1 for being end of string or file
int tokenizer(char* str, char* outstr, char delim, int occurrences) {
  //printf("start tokenizer\n");
  int i = 0, j = 0;
  if(!str){
    return 1;
  }
  if(!delim){
    return 1;
  }

  //printf("clearing outstring\n");
  while(outstr[i] != 0) {
    outstr[i] = 0;
    i++;
  }
  i = 0;

  //printf("finding location in string\n");
  while(str[i] && occurrences > 0) {
    if (str[i] == delim) {
      occurrences--;
    }
    i++;
  }

  //makes sure its not end of string
  if (!str[i]) {
      return 1;
  }

  //printf("copying\n");
  while (str[i] && str[i] != delim) {
    outstr[j] = str[i];
    //printf("%c ", outstr[j]);
    i++;
    j++;//incremented here so the debug prints would work
  }
  outstr[j] = 0;
  return 0;
}


int main(int argc, char *argv[]){
  int in, out, err, passwrdfile,  n=0, i=0, k=1;
  int gid, uid;

  char user[32], pass[32], line[128], *cp;

  close(0); close(1); close(2);
  in = open(argv[1], O_RDONLY);
  out = open(argv[1], 1);
  err = open(argv[1], 2);

  fixtty(argv[1]);

  //printf("opening passwd file\n");
  passwrdfile = open("/etc/passwd", 0);
  if(!passwrdfile){
    printf("Login failed to load password file!!\n");
    close(in); close(out); close(err); close(passwrdfile);
    return -1;
  }
  else{
    printf("Loaded passwd...\n");
  }

  while(1){
    printf("Login: ");
    gets(user);//user login
    printf("password: ");
    gets(pass);//user password
    //printf("user: %s, password: %s\n", user, pass);
    int j = 0;
    n = read(passwrdfile, buf, BUFFSIZE);
    //printf("getting line from file\n");

    tokenizer(buf, line, '\n', j++);
    //line = strtok(buf, '\n');
    //printf("%s\n", line);

    int flag = 0;
    while(line){
      k = 0;
      if(flag){
          printf("Login not found\n");
          return -1;
      }
      else{
        printf("Load a line from password\n");
      }

      char name_file[32];
      tokenizer(line, name_file, ':', k++);
      //printf("name in file: %s\n", name_file);
      //name_file = strtok(line, ':');
      if(!strcmp(name_file, user)){
        char pass_file[32];
        tokenizer(line, pass_file, ':', k++);
        //pass_file = strtok(0, ':');

        if(!strcmp(pass_file, pass)){
          //username and password Found
          char uid[16];
          char gid[16];
          char fullname[32];
          char alias[16];
          char mode[16];
          char direc[16];
          char program[16];

          tokenizer(line, gid, ':', k++);
          //gid = strtok(0, ':');
          tokenizer(line, uid, ':', k++);
          //uid = strtok(0, ':');
          tokenizer(line, fullname, ':', k++);
          //fullname = strtok(0, ':');
          tokenizer(fullname, alias, ' ', 0);
          tokenizer(fullname, mode, ' ', 1);
          tokenizer(line, direc, ':',k++);
          //direc = strtok(0, ':');
          tokenizer(line, program, ':', k++);
          //program = strtok(0, ':');
          //alias = strtok(fullname, ' ');
          //mode = strtok(0, ' ');

          chuid(atoi(uid), atoi(gid));
          chdir(direc);

          //printf("%s %s %s %s %s %s %s %s %s\n", name_file, pass_file, gid, uid, fullname, alias, mode, direc, program);
          close(passwrdfile);
          printf("Welcome %s. Loading %s\n", alias, direc);
          exec(program);
          return 0;
        }

      }
      flag = tokenizer(buf, line, '\n', j++);
      //line = strtok(0, '\n');
    }
    if (line[0] == 0){
      printf("Login Failed\n");
      close(passwrdfile);
      passwrdfile = open("/etc/passwd", 0);//read file again resetting
    }
  }
  printf("Exit\n");
}
//ls
#include "ucode.c"

#define BUFFSIZE 1024


char *t1 = "xwrxwrxwr-------";
char *t2 = "-----------------";

char cwd[32];
char buf[BUFFSIZE];

int ls_boi(char *name, STAT *sp){
  //printf("%x ", sp->st_mode);
  //printf("%s name\n", name);
  if(sp->st_mode == 0x41ED){//if directory
    mputc('d');
  }
  else{
    mputc('-');
  }

  //to be fair I got this from a friend from 360 after trying to get my i_mode
  //to print all nicely I understand how it works now and it looks better
  //than the hex code of the mode
  int i = 0;
  for(i = 8; i >= 0; i--){
    if(sp->st_mode & (1<<i)){
      mputc(t1[i]);
    }
    else
    {
      mputc(t2[i]);
    }
  }

  printf("  %d  ", sp->st_nlink);
  printf("%d  ", sp->st_uid);
  printf("%d  ", sp->st_gid);
  printf("%d  ", sp->st_size);
  printf("    %s\n\r", name);
}

int main(int argc, char *argv[]){
  //pwd();//used to help debug
  //printf("in ls\n");
  DIR *dp;
  char * cp;
  STAT statbuf;//not a pointer to have stuff actually stored locally
  int fd;
  int n, flag;

  if(argc > 1){//only works with absolute path
    //printf("opening pathname\n");
    chdir(argv[1]);
    fd = open(argv[1], O_RDONLY);
  }
  else{
    //printf("opening cwd\n");
    getcwd(cwd);
    fd = open(cwd, O_RDONLY);
  }
  //printf("cwd is: %s\n", cwd);

  if(fd < 0){
    printf("file descriptor failed to open\n");
    close(fd);
    exit(-1);
  }

  //read inode block
  n = read(fd, buf, BUFFSIZE);
  cp = buf;
  dp = (DIR *)cp;

  if(n < 0){
    printf("read failed\n");
    exit(-1);
  }
  char temp[32];
  //printf("printing stats\n");
  while(cp < buf + BUFFSIZE){
    memset(temp, 0, 32);//resets temp every iteration to prevent corruption
    strncpy(temp, dp->name, dp->name_len);//copys name to TEMPORARY
    strcat(temp, "\0");
    //printf("temp is: %s\n", temp);

    if((flag = stat(temp, &statbuf)) < 0){
      printf("stat failed\n");
    }
    else{
      //printf("flag is: %d\n", flag);
      ls_boi(temp, &statbuf);
    }

    cp += dp->rec_len;
    dp = (DIR *)cp;
  }
  close(fd);
  exit(0);
}
//more
#include "ucode.c"

#define BUFFSIZE 1024

char buf[2];
char tty[64];

int main(int argc, char *argv[]){
  int n;
  int in, out;
  int lines = 0;
  int flag = 0;



  gettty(tty);
  int in1 = open("/dev/tty0", O_RDONLY);
  int out1 = open("/dev/tty0", O_WRONLY);

  //printf("argc is %d\n", argc);
  if(argc > 1){
    in = open(argv[1], O_RDONLY);
    out = 1;
  }
  else{
    in = in1;
    out = 1;
  }

  if(in < 0){
    write(out1, "file not opened\n", 16);
    exit(-1);
  }

  while((n = read(in, buf, 1)) == 1){
    /*if(n < 1){
      printf("DONE\n");
      break;
    }*/
    //mputc(*buf);
    //putchar(buf[0]);
    if(argc > 1){//file out through tty
      write(out, buf, 1);
    }
    else{//stdout
      write(out1, buf, 1);
    }


    if(*buf == '\n' || *buf == '\r'){
      lines++;
      if(lines == 25){
        flag = 1;
      }
      if(flag){
        while(1){
          char c = 0;

          n = read(in1, &c, 1);
          if(n==0||c==4||c==0){
            continue;
          }
          c = (c & 0x7F);

          if(c == '\n' || c == '\r'){//if enter the user exits more
            break;
          }
          else if(c == ' '){//if space print next screen
            lines = 0;
            flag = 0;
            break;
          }
        }
      }
      write(out1, "\n\r", 1);
    }
  }
  close(in); close(out1);
  exit(0);
}
//sh
#include "ucode.c"

#define BUFFSIZE 1024

char buf[BUFFSIZE];
char input[128];

int main(int argc, char * argv[]){
  int in = 0;
  int status;
  while(1){
    printf("bhsh #%d $", getpid());
    gets(input);

    if(!strcmp(input, "logout") || !strcmp(input, "exit")){
      break;
    }

    int pid = fork();
    if(pid == 0){
      exec(input);
    }
    else{
      pid = wait(&status);
    }
  }
}
